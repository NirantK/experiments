# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import p_calc_pb2 as p__calc__pb2


class CalculatorStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SquareRoot = channel.unary_unary(
        '/services.smartreply.Calculator/SquareRoot',
        request_serializer=p__calc__pb2.Number.SerializeToString,
        response_deserializer=p__calc__pb2.Number.FromString,
        )


class CalculatorServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SquareRoot(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CalculatorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SquareRoot': grpc.unary_unary_rpc_method_handler(
          servicer.SquareRoot,
          request_deserializer=p__calc__pb2.Number.FromString,
          response_serializer=p__calc__pb2.Number.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'services.smartreply.Calculator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SuggestReponseStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetSmartReply = channel.unary_unary(
        '/services.smartreply.SuggestReponse/GetSmartReply',
        request_serializer=p__calc__pb2.Query.SerializeToString,
        response_deserializer=p__calc__pb2.Response.FromString,
        )


class SuggestReponseServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetSmartReply(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SuggestReponseServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetSmartReply': grpc.unary_unary_rpc_method_handler(
          servicer.GetSmartReply,
          request_deserializer=p__calc__pb2.Query.FromString,
          response_serializer=p__calc__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'services.smartreply.SuggestReponse', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SmartReplyTrainingStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.BeginTraining = channel.unary_unary(
        '/services.smartreply.SmartReplyTraining/BeginTraining',
        request_serializer=p__calc__pb2.TrainSmartReply.SerializeToString,
        response_deserializer=p__calc__pb2.TrainSmartReply.FromString,
        )


class SmartReplyTrainingServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def BeginTraining(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SmartReplyTrainingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'BeginTraining': grpc.unary_unary_rpc_method_handler(
          servicer.BeginTraining,
          request_deserializer=p__calc__pb2.TrainSmartReply.FromString,
          response_serializer=p__calc__pb2.TrainSmartReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'services.smartreply.SmartReplyTraining', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
